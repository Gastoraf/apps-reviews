
package ru.lab.apps.client;

import java.util.List;
import java.util.concurrent.Future;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.AsyncHandler;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.Response;
import jakarta.xml.ws.ResponseWrapper;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.1
 * Generated source version: 3.0
 * 
 */
@WebService(name = "AppsService", targetNamespace = "http://service.service.apps.lab.ru/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AppsService {


    /**
     * 
     * @param arg0
     * @return
     *     returns jakarta.xml.ws.Response<ru.lab.apps.client.AddAppResponse>
     */
    @WebMethod(operationName = "addApp")
    @RequestWrapper(localName = "addApp", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.AddApp")
    @ResponseWrapper(localName = "addAppResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.AddAppResponse")
    public Response<AddAppResponse> addAppAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        App arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "addApp")
    @RequestWrapper(localName = "addApp", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.AddApp")
    @ResponseWrapper(localName = "addAppResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.AddAppResponse")
    public Future<?> addAppAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        App arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<AddAppResponse> asyncHandler);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "addApp", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.AddApp")
    @ResponseWrapper(localName = "addAppResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.AddAppResponse")
    public void addApp(
        @WebParam(name = "arg0", targetNamespace = "")
        App arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns jakarta.xml.ws.Response<ru.lab.apps.client.GetAppByIdResponse>
     */
    @WebMethod(operationName = "getAppById")
    @RequestWrapper(localName = "getAppById", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAppById")
    @ResponseWrapper(localName = "getAppByIdResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAppByIdResponse")
    public Response<GetAppByIdResponse> getAppByIdAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAppById")
    @RequestWrapper(localName = "getAppById", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAppById")
    @ResponseWrapper(localName = "getAppByIdResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAppByIdResponse")
    public Future<?> getAppByIdAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAppByIdResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns ru.lab.apps.client.App
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAppById", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAppById")
    @ResponseWrapper(localName = "getAppByIdResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAppByIdResponse")
    public App getAppById(
        @WebParam(name = "arg0", targetNamespace = "")
        Long arg0);

    /**
     * 
     * @return
     *     returns jakarta.xml.ws.Response<ru.lab.apps.client.GetAllAppsResponse>
     */
    @WebMethod(operationName = "getAllApps")
    @RequestWrapper(localName = "getAllApps", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAllApps")
    @ResponseWrapper(localName = "getAllAppsResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAllAppsResponse")
    public Response<GetAllAppsResponse> getAllAppsAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "getAllApps")
    @RequestWrapper(localName = "getAllApps", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAllApps")
    @ResponseWrapper(localName = "getAllAppsResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAllAppsResponse")
    public Future<?> getAllAppsAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<GetAllAppsResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.util.List<ru.lab.apps.client.App>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllApps", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAllApps")
    @ResponseWrapper(localName = "getAllAppsResponse", targetNamespace = "http://service.service.apps.lab.ru/", className = "ru.lab.apps.client.GetAllAppsResponse")
    public List<App> getAllApps();

}
